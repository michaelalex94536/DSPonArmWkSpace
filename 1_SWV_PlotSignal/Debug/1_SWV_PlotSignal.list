
1_SWV_PlotSignal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000184  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800031c  0800031c  000024b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800031c  0800031c  000024b4  2**0
                  CONTENTS
  4 .ARM          00000000  0800031c  0800031c  000024b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800031c  0800031c  000024b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800031c  0800031c  0000131c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000320  08000320  00001320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000004b4  20000000  08000324  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  200004b4  080007d8  000024b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004d4  080007d8  000024d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000024b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000003ad  00000000  00000000  000024e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001b7  00000000  00000000  00002891  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000070  00000000  00000000  00002a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000038  00000000  00000000  00002ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dcd1  00000000  00000000  00002af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000008f0  00000000  00000000  000107c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004fabb  00000000  00000000  000110b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00060b6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000a4  00000000  00000000  00060bb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00060c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200004b4 	.word	0x200004b4
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000304 	.word	0x08000304

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200004b8 	.word	0x200004b8
 80001d4:	08000304 	.word	0x08000304

080001d8 <main>:

static void swv_plot_signal(void);
static void pseudo_dly(int dly);

int main ()
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	// Enable FPU
	SCB->CPACR |= ((3UL << 20) | (3UL << 22));
 80001dc:	4b05      	ldr	r3, [pc, #20]	@ (80001f4 <main+0x1c>)
 80001de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80001e2:	4a04      	ldr	r2, [pc, #16]	@ (80001f4 <main+0x1c>)
 80001e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80001e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88


	while(1)
	{
		swv_plot_signal();
 80001ec:	f000 f804 	bl	80001f8 <swv_plot_signal>
 80001f0:	e7fc      	b.n	80001ec <main+0x14>
 80001f2:	bf00      	nop
 80001f4:	e000ed00 	.word	0xe000ed00

080001f8 <swv_plot_signal>:
	}
}


static void swv_plot_signal(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
	for(int i = 0; i < HZ_5_SIG_LEN; i++)
 80001fe:	2300      	movs	r3, #0
 8000200:	607b      	str	r3, [r7, #4]
 8000202:	e00d      	b.n	8000220 <swv_plot_signal+0x28>
	{
		g_in_sig_sample = _5hz_signal[i];
 8000204:	4a0b      	ldr	r2, [pc, #44]	@ (8000234 <swv_plot_signal+0x3c>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	009b      	lsls	r3, r3, #2
 800020a:	4413      	add	r3, r2
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4a0a      	ldr	r2, [pc, #40]	@ (8000238 <swv_plot_signal+0x40>)
 8000210:	6013      	str	r3, [r2, #0]
		pseudo_dly(9000);
 8000212:	f242 3028 	movw	r0, #9000	@ 0x2328
 8000216:	f000 f811 	bl	800023c <pseudo_dly>
	for(int i = 0; i < HZ_5_SIG_LEN; i++)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	3301      	adds	r3, #1
 800021e:	607b      	str	r3, [r7, #4]
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000226:	dded      	ble.n	8000204 <swv_plot_signal+0xc>
	}
}
 8000228:	bf00      	nop
 800022a:	bf00      	nop
 800022c:	3708      	adds	r7, #8
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	20000000 	.word	0x20000000
 8000238:	200004d0 	.word	0x200004d0

0800023c <pseudo_dly>:

static void pseudo_dly(int dly)
{
 800023c:	b480      	push	{r7}
 800023e:	b085      	sub	sp, #20
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < dly; i++){}
 8000244:	2300      	movs	r3, #0
 8000246:	60fb      	str	r3, [r7, #12]
 8000248:	e002      	b.n	8000250 <pseudo_dly+0x14>
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	3301      	adds	r3, #1
 800024e:	60fb      	str	r3, [r7, #12]
 8000250:	68fa      	ldr	r2, [r7, #12]
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	429a      	cmp	r2, r3
 8000256:	dbf8      	blt.n	800024a <pseudo_dly+0xe>
}
 8000258:	bf00      	nop
 800025a:	bf00      	nop
 800025c:	3714      	adds	r7, #20
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr
	...

08000268 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000268:	480d      	ldr	r0, [pc, #52]	@ (80002a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800026a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800026c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000270:	480c      	ldr	r0, [pc, #48]	@ (80002a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000272:	490d      	ldr	r1, [pc, #52]	@ (80002a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000274:	4a0d      	ldr	r2, [pc, #52]	@ (80002ac <LoopForever+0xe>)
  movs r3, #0
 8000276:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000278:	e002      	b.n	8000280 <LoopCopyDataInit>

0800027a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800027a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800027c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800027e:	3304      	adds	r3, #4

08000280 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000280:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000282:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000284:	d3f9      	bcc.n	800027a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000286:	4a0a      	ldr	r2, [pc, #40]	@ (80002b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000288:	4c0a      	ldr	r4, [pc, #40]	@ (80002b4 <LoopForever+0x16>)
  movs r3, #0
 800028a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800028c:	e001      	b.n	8000292 <LoopFillZerobss>

0800028e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800028e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000290:	3204      	adds	r2, #4

08000292 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000292:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000294:	d3fb      	bcc.n	800028e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000296:	f000 f811 	bl	80002bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800029a:	f7ff ff9d 	bl	80001d8 <main>

0800029e <LoopForever>:

LoopForever:
  b LoopForever
 800029e:	e7fe      	b.n	800029e <LoopForever>
  ldr   r0, =_estack
 80002a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002a8:	200004b4 	.word	0x200004b4
  ldr r2, =_sidata
 80002ac:	08000324 	.word	0x08000324
  ldr r2, =_sbss
 80002b0:	200004b4 	.word	0x200004b4
  ldr r4, =_ebss
 80002b4:	200004d4 	.word	0x200004d4

080002b8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002b8:	e7fe      	b.n	80002b8 <ADC_IRQHandler>
	...

080002bc <__libc_init_array>:
 80002bc:	b570      	push	{r4, r5, r6, lr}
 80002be:	4d0d      	ldr	r5, [pc, #52]	@ (80002f4 <__libc_init_array+0x38>)
 80002c0:	4c0d      	ldr	r4, [pc, #52]	@ (80002f8 <__libc_init_array+0x3c>)
 80002c2:	1b64      	subs	r4, r4, r5
 80002c4:	10a4      	asrs	r4, r4, #2
 80002c6:	2600      	movs	r6, #0
 80002c8:	42a6      	cmp	r6, r4
 80002ca:	d109      	bne.n	80002e0 <__libc_init_array+0x24>
 80002cc:	4d0b      	ldr	r5, [pc, #44]	@ (80002fc <__libc_init_array+0x40>)
 80002ce:	4c0c      	ldr	r4, [pc, #48]	@ (8000300 <__libc_init_array+0x44>)
 80002d0:	f000 f818 	bl	8000304 <_init>
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	10a4      	asrs	r4, r4, #2
 80002d8:	2600      	movs	r6, #0
 80002da:	42a6      	cmp	r6, r4
 80002dc:	d105      	bne.n	80002ea <__libc_init_array+0x2e>
 80002de:	bd70      	pop	{r4, r5, r6, pc}
 80002e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80002e4:	4798      	blx	r3
 80002e6:	3601      	adds	r6, #1
 80002e8:	e7ee      	b.n	80002c8 <__libc_init_array+0xc>
 80002ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80002ee:	4798      	blx	r3
 80002f0:	3601      	adds	r6, #1
 80002f2:	e7f2      	b.n	80002da <__libc_init_array+0x1e>
 80002f4:	0800031c 	.word	0x0800031c
 80002f8:	0800031c 	.word	0x0800031c
 80002fc:	0800031c 	.word	0x0800031c
 8000300:	08000320 	.word	0x08000320

08000304 <_init>:
 8000304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000306:	bf00      	nop
 8000308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800030a:	bc08      	pop	{r3}
 800030c:	469e      	mov	lr, r3
 800030e:	4770      	bx	lr

08000310 <_fini>:
 8000310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000312:	bf00      	nop
 8000314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000316:	bc08      	pop	{r3}
 8000318:	469e      	mov	lr, r3
 800031a:	4770      	bx	lr
